name: Terragrunt Plan
run-name: Terragrunt Plan - PR/${{ github.event.pull_request.number }}

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
    branches:
      - main

permissions:
  checks: write
  statuses: write
  contents: read
  id-token: write

env:
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache

jobs:
  terragrunt-plan:
    runs-on: ubuntu-latest
    concurrency:
      group: "terragrunt-${{ matrix.directory }}"
    strategy:
      matrix:
        directory:
          - "rstuhlmuller/github"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::716182248480:role/Github-TF-State

      - name: Create OpenTofu Plugin Cache Dir
        run: mkdir -p $TF_PLUGIN_CACHE_DIR

      - name: OpenTofu Plugin Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ runner.os }}-terraform-plugin-cache-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Terragrunt Plan
        uses: gruntwork-io/terragrunt-action@v3
        env:
          TF_PLUGIN_CACHE_DIR: ${{ env.TF_PLUGIN_CACHE_DIR }}
        with:
          tofu_version: "1.10.6"
          tg_version: "0.84.1"
          tg_command: plan
          tg_dir: ${{ matrix.directory }}

      - name: Post Terragrunt Plan as PR Comment
        env:
          TF_PLUGIN_CACHE_DIR: ${{ env.TF_PLUGIN_CACHE_DIR }}
        run: |
          export TF_PLUGIN_CACHE_DIR=$TF_PLUGIN_CACHE_DIR
          for f in  $(find ./*/ -name plan.out); do
            tofu show -json "$f" > "${f%.out}_plan.json"
            items=$(cat ${f%.out}_plan.json | jq -r '.resource_changes[]? | "\(.change.actions) \(.address)"' | grep -v "no-op" || true)
            if [ ! -z "$items" ]; then
              # Sorted Output
              echo '<details><summary>' >> ${OUTPUT}
              echo '' >> ${OUTPUT}
              echo "## $layer" >> ${OUTPUT}
              echo $items | xargs -n2 sh -c 'echo "- \`$1\`" $2' dummy >> ${OUTPUT}
              echo '</summary>' >> ${OUTPUT}
              echo '' >> ${OUTPUT}
              echo '``` hcl' >> ${OUTPUT}
              tofu show -no-color plan.out >> ${OUTPUT}
              echo '```' >> ${OUTPUT}
              echo '</details>' >> ${OUTPUT}
              # The light Output in case there are too much output
              echo "## $layer" >> ${OUTPUT_LIGHT}
              echo $items | xargs -n2 sh -c 'echo "- \`$1\`" $2' dummy >> ${OUTPUT_LIGHT}
            fi
          done

      - name: Create/Update Comment
        uses: actions/github-script@v7
        env:
          OUTPUTS: ${{ env.OUTPUTS }}
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const OUTPUT = 'plan_output.md';
            const OUTPUT_LIGHT = 'plan_output_light.md';
            const commentHeader = '## :terraform: Terragrunt Plan Results';

            let outputContent = fs.readFileSync(OUTPUT, 'utf8');
            let outputLightContent = fs.readFileSync(OUTPUT_LIGHT, 'utf8');

            if (outputContent.trim() === '') {
              outputContent = commentHeader + '\n\nNo changes detected by Terragrunt plan.';
              outputLightContent = 'No changes detected by Terragrunt plan.';
            } else {
              outputContent = commentHeader + '\n\n' + outputContent;
              outputLightContent = commentHeader + '\n\n' + outputLightContent;
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });

            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.startsWith(commentHeader));

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: outputContent,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: outputContent,
              });
            }
